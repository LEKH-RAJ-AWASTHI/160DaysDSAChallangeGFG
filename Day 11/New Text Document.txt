Day 11
Search Pattern KMP algorithm

Given string text (size m) and Pattern (size n)

For the bruteforce approach it takes n*m time complexity

and for optimal approach We use KMP algorithm (n+m) time complexity

For KMP algorithm we create a largest Prefix suffix(LPS). This create a array of size (n) which contains longest suffix. 

Using LPS we can safely jump in the text array without missing the match.

Below is the java code generated by chatgpt: with proper comments
public class KMPAlgorithm {

    // Function to compute the LPS array
    public static int[] computeLPS(String pattern) {
        int m = pattern.length(); // Length of the pattern
        int[] lps = new int[m];
        int len = 0; // Length of the previous longest prefix suffix
        int i = 1;

        // LPS[0] is always 0
        lps[0] = 0;

        while (i < m) {
            if (pattern.charAt(i) == pattern.charAt(len)) {
                len++;
                lps[i] = len;
                i++;
            } else {
                if (len != 0) {
                    // Fall back to the previous LPS value
                    len = lps[len - 1];
                } else {
                    // No prefix-suffix match
                    lps[i] = 0;
                    i++;
                }
            }
        }
        return lps;
    }

    // Function to perform KMP search
    public static void KMPSearch(String text, String pattern) {
        int n = text.length(); // Length of the text
        int m = pattern.length(); // Length of the pattern
        int[] lps = computeLPS(pattern);

        int i = 0; // Index for text
        int j = 0; // Index for pattern

        while (i < n) {
            if (text.charAt(i) == pattern.charAt(j)) {
                i++;
                j++;
            }

            if (j == m) {
                // Match found
                System.out.println("Pattern found at index: " + (i - j));
                j = lps[j - 1]; // Reset j using LPS to search for the next match
            } else if (i < n && text.charAt(i) != pattern.charAt(j)) {
                // Mismatch after some matches
                if (j != 0) {
                    j = lps[j - 1];
                } else {
                    i++;
                }
            }
        }
    }

    // Main function to test the KMP algorithm
    public static void main(String[] args) {
        String text = "ABC ABCDAB ABCDABCDABDE";
        String pattern = "ABCDABD";

        System.out.println("Text: " + text);
        System.out.println("Pattern: " + pattern);
        KMPSearch(text, pattern);
    }
}



Help
https://www.youtube.com/watch?v=JoF0Z7nVSrA&t=557s


